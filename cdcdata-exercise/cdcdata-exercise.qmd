---
title: "CDC Data Exercise"
---
## Description of Data 

The data used in this exercise will be using in this exercise is called "NCHS - Drug Poisoning Mortality by State: United States." I downloaded this dataset from the CDC website linked here: https://data.cdc.gov/NCHS/NCHS-Drug-Poisoning-Mortality-by-State-United-Stat/jx6g-fdh6/about_data. This dataset contains entries on drug poisoning deaths in the U.S. and at the state-level. The data set's time range is from 1999 to 2015.  

## Loading in the Data

First, I will load any packages that may be of help in this exercise. 
```{r}
library(dplyr)
library(tidyverse)
library(ggplot2)
```

Now I will load in the CDC data for this exercise that was described in the section above. I will call it "data".
```{r}
data <- read.csv("drug-data.csv")
```

I will use the summary(), dim(), and head() functions to get a better look at the data. 
```{r}
summary(data)
dim(data)
head(data)
```
As seen by the output, this dataset contains 18 variables with 2,703 observations. 

## Processing the Data

Below, I will select the variables that I will work with in this exercise. I will reassign this to a new dataset called "processed_data". 
```{r}
processed_data <- data %>% select(Year, Sex, Age, Race.and.Hispanic.Origin, State, Deaths, Population, Crude.Death.Rate)
```

I will rename the variables to be easier to understand. I will use head() to ensure this worked.
```{r}
processed_data <- processed_data %>%
  rename(Race_and_Hispanic_Origin = Race.and.Hispanic.Origin,
         Crude_Death_Rate = Crude.Death.Rate)
head(processed_data)
```
## Exploratory/Descriptive Analysis and Frequency Table

I will create a scatterplot to assess the relationship between deaths and population. Then, I will use the cor() function to obtain the correlation coefficient to determine the strength of this relationship. 
```{r}
ggplot(processed_data, aes(x = Deaths, y = Population)) +
  geom_point(color = "#429bf9") + # giving the points of the scatterplot a blue color
  labs(title = "Scatterplot of Relationship between Number of Deaths \n From Drug Poisoning and Population Size",
       x = "Number of Deaths",
       y = "Size of Population") + # labeling axes and titles!
  theme(legend.position = "none", plot.title = element_text(size = 18, face = "bold", hjust = 0.5), axis.title.x = element_text(size = 12, face = "bold"), axis.title.y = element_text(size = 12, face = "bold")) # removing legend; making title and axes bold and giving them a larger font size

cor(processed_data$Deaths, processed_data$Population) # correlation coefficient
```
The scatterplot above, shows a positive linear relationship between the number of deaths from drug poisoning and the size of the population. The correlation coefficient is 0.8997261, which indicates a strong positive linear relationship.

Now, I will assess the relationship between year and death. Then, I will use the cor() function to obtain the correlation coefficient to determine the strength of this relationship. 
```{r}
ggplot(processed_data, aes(x = Year, y = Deaths)) +
  geom_point(color = "#33d11a") + # giving the points of the scatterplot a green color
  labs(title = "Scatterplot of Relationship between Number of Deaths \n From Drug Poisoning and Year",
       x = "Year",
       y = "Number of Deaths") + # labeling axes and titles!
  theme(legend.position = "none", plot.title = element_text(size = 18, face = "bold", hjust = 0.5), axis.title.x = element_text(size = 12, face = "bold"), axis.title.y = element_text(size = 12, face = "bold")) # removing legend; making title and axes bold and giving them a larger font size

cor(processed_data$Deaths, processed_data$Year) # correlation coefficient
```
The scatterplot above shows that there may be a slight relationship between year and number deaths due to drug poisoning. The correlation coefficient is 0.1246065; this indicates a VERY weak relationship (possibly no realtionship at all). 

I will create a correlation matrix. I did this in the "data-exercise" and found it to be helpful. 
```{r}
# use only numberic variables!
cor_matrix <- cor(processed_data %>% select(where(is.numeric)))

# print out!
print(cor_matrix)
```
I will create a frequency table to display the total number of deaths from drug poisoning by year. 
```{r}
# Create frequency table for the total number of deaths by year
death_by_year <- processed_data %>%
  group_by(Year) %>%
  summarise(Total_Deaths = sum(Deaths, na.rm = TRUE)) %>%
  arrange(Year)

# View the frequency table
death_by_year
```

## Assessing Distribution 

I will assess the distribution of both the number of deaths due to drug poisoning and the population size. 
```{r}
# Deaths
ggplot(processed_data, aes(x = Deaths)) +
  geom_histogram(bins = 30, fill = "#ee5050", color = "#c41616", alpha = 0.7) +
  labs(title = "Histogram of Deaths from Drug Poisoning",
       x = "Number of Deaths",
       y = "Frequency") +
  theme(plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
        axis.title.x = element_text(size = 12, face = "bold"),
        axis.title.y = element_text(size = 12, face = "bold"))
# Population Size
ggplot(processed_data, aes(x = Population)) +
  geom_histogram(bins = 30, fill = "#f9c363", color = "#ffa303", alpha = 0.7) +
  labs(title = "Histogram of Population Size",
       x = "Population Size",
       y = "Frequency") +
  theme(plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
        axis.title.x = element_text(size = 12, face = "bold"),
        axis.title.y = element_text(size = 12, face = "bold"))

```
Both histograms for number of deaths due to drug poisoning and population size appeared to be skewed to the right. 

I will create a table to display the mean and standard deviations of the number of deaths due to drug poisoning from 1999 to 2015 as well as the population size from 1999 to 2015. 
```{r}
distribution_table <- processed_data %>%
  group_by(Year) %>%
  summarise(
    Mean_Deaths = mean(Deaths, na.rm = TRUE),
    SD_Deaths = sd(Deaths, na.rm = TRUE),
    Mean_Population = mean(Population, na.rm = TRUE),
    SD_Population = sd(Population, na.rm = TRUE)
  )

print(distribution_table) # print table to see it!
```





## This section is contributed by Yufei Wu

### Summarize the distribution/composition of each variable
```{r, warning=FALSE}
# Load package
library(gtsummary)
summary_table <- processed_data %>% 
  tbl_summary(statistic = list(
    all_continuous() ~ "{mean} {median} {min} {max} {sd}",
    all_categorical() ~ "{n} {N} {p}%"
  )) %>% 
  as_tibble()
#print(summary_table)
print(summary_table, n = Inf)

```
### Generate the synthetic data
I would like to generate the synthetic data according to the composition of categorical variable and the distribution of continuous variable. I tried to use ChatGPT to generate the data for me, and here is my initial prompt: "Generate synthetic data: there are 8 variables and 2073 observations. For the continuous variable Year, it is from 1,999 to 2015, mean 2,007, median 2,007. For Sex, Age, Race_and_Hispanic_Origin, and State, refer to the gtsummary tibble. For Population, it is from 238,163 to 321,418,820, mean 16,586,603, median 6,403,290, sd 34,492,886, the distribution is skewed to the right. For Deaths, it is from 1 to 52,404, mean 1,873, median 478, sd 4,525, the distribution is skewed to the right. Crude_Death_Rate is from Deaths divided by Population. There is a positive linear relationship between Deaths and Population. The correlation coefficient is 0.8997. Give me the code to generate such data." Then I manually add the specific content in the code to generate categorical data. At first, I tired to add correlation between Deaths and Population, but I found things get more and more complicated and could not work. I suspect that the correlation in the original data was due to some outliers, so I eventually generate the deaths data without considering the correlation.
```{r}
set.seed(123)  # Set seed for reproducibility

# Number of observations
n <- 2073

# 1. Generate 'Year' (Continuous Variable)
year_min <- 1999
year_max <- 2015
year_mean <- 2007
year_median <- 2007

# Generating Year as uniformly distributed between min and max
year <- sample(year_min:year_max, n, replace = TRUE)

# 2. Generate 'Sex' (Categorical Variable)
sex_levels <- c("Both Sexes", "Female", "Male")
sex_probs <- c(0.55, 0.225, 0.225) 
sex <- sample(sex_levels, n, replace = TRUE, prob = sex_probs)

# 3. Generate 'Age' (Categorical Variable)
age_levels <- c("15-24 years", "25-34 years", "35-44 years", "45-54 years", "55-64 years", "65-74 years", "75+ years", "All Ages", "Less than 15 years")
age_probs <- c(0.075, 0.075, 0.075, 0.075, 0.075, 0.075, 0.075, 0.4, 0.075) 
age <- sample(age_levels, n, replace = TRUE, prob = age_probs)

# 4. Generate 'Race_and_Hispanic_Origin' (Categorical Variable)
race_levels <- c("All Races-All Origins", "Hispanic", "Non-Hispanic Black", "Non-Hispanic White")
race_probs <- c(0.49, 0.17, 0.17, 0.17) 
race_and_hispanic_origin <- sample(race_levels, n, replace = TRUE, prob = race_probs)

# 5. Generate 'State' (Categorical Variable)
state_levels <- c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", 
"District of Columbia", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", 
"Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", 
"Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", 
"New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", 
"Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", 
"United States", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming") 
state_probs <- c(0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 
0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 
0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 
0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063, 
0.0063, 0.0063, 0.0063, 0.0063, 0.6787, 0.0063, 0.0063, 0.0063, 0.0063, 0.0063,
0.0063, 0.0063) 
state <- sample(state_levels, n, replace = TRUE, prob = state_probs)

# 6. Generate 'Population' (Continuous Variable) - skewed to the right
population_min <- 238163
population_max <- 321418820
population_mean <- 16586603
population_median <- 6403290
population_sd <- 34492886

# Generate skewed population data using a log-normal distribution
population <- rlnorm(n, meanlog = log(population_mean), sdlog = log(population_sd / population_mean))

# Ensure values are within range
population <- pmin(pmax(population, population_min), population_max)

# 7. Generate 'Deaths' (Continuous Variable) - skewed to the right
deaths_min <- 1
deaths_max <- 52404
deaths_mean <- 1873
deaths_median <- 478
deaths_sd <- 4525

# Compute meanlog correctly
meanlog <- log(deaths_mean) - 0.5 * log(1 + (deaths_sd / deaths_mean)^2)
sdlog <- sqrt(log(1 + (deaths_sd / deaths_mean)^2))

# Generate right-skewed death counts
deaths <- rlnorm(n, meanlog = meanlog, sdlog = sdlog)

# Ensure values are within range
deaths <- pmin(pmax(deaths, deaths_min), deaths_max)

# 8. Generate 'Crude_Death_Rate' (Calculated as Deaths / Population)
crude_death_rate <- deaths / population * 1000  # Crude Death Rate per 1000 people

# Combine all the variables into a data frame
synthetic_data <- data.frame(
  year = year,
  sex = sex,
  age = age,
  race_and_hispanic_origin = race_and_hispanic_origin,
  state = state,
  population = population,
  deaths = deaths,
  crude_death_rate = crude_death_rate
)


```

### Explore the synthetic data
```{r}
# Get an overview of the data
summary(synthetic_data)
dim(synthetic_data)
head(synthetic_data)

# Assess the distribution of deaths and population
# Deaths
ggplot(synthetic_data, aes(x = deaths)) +
  geom_histogram(bins = 30, fill = "#ee5050", color = "#c41616", alpha = 0.7) +
  labs(title = "Histogram of Deaths from Drug Poisoning",
       x = "Number of Deaths",
       y = "Frequency") +
  theme(plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
        axis.title.x = element_text(size = 12, face = "bold"),
        axis.title.y = element_text(size = 12, face = "bold"))
# Population Size
ggplot(synthetic_data, aes(x = population)) +
  geom_histogram(bins = 30, fill = "#f9c363", color = "#ffa303", alpha = 0.7) +
  labs(title = "Histogram of Population Size",
       x = "Population Size",
       y = "Frequency") +
  theme(plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
        axis.title.x = element_text(size = 12, face = "bold"),
        axis.title.y = element_text(size = 12, face = "bold"))

# Create frequency table for the total number of deaths by year
death_by_year1 <- synthetic_data %>%
  group_by(year) %>%
  summarise(total_deaths = sum(deaths, na.rm = TRUE)) %>%
  arrange(year)

# View the frequency table
death_by_year1

# Create table to display the mean and standard deviations of the number of deaths from 1999 to 2015 as well as populationfrom 1999 to 2015
distribution_table1 <- synthetic_data %>%
  group_by(year) %>%
  summarise(
    mean_deaths = mean(deaths, na.rm = TRUE),
    sd_deaths = sd(deaths, na.rm = TRUE),
    mean_population = mean(population, na.rm = TRUE),
    sd_population = sd(population, na.rm = TRUE)
  )

print(distribution_table1) 
```
The overall distribution of variables in the synthetic data is very similar to the original data. The trends of total deaths and population by the year are also similar to the original ones, while the trend of mean deaths is not very similar to the original one. Generally speaking, the synthetic data is good while with some imperfection.
